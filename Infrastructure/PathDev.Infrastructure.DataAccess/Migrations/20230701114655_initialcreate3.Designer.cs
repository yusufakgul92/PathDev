// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PathDev.Infrastructure.DataAccess.Service.EF;

#nullable disable

namespace PathDev.Infrastructure.DataAccess.Migrations
{
    [DbContext(typeof(PathDevDbContext))]
    [Migration("20230701114655_initialcreate3")]
    partial class initialcreate3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PathDev.Core.Model.EFModel.Customer.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("County")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FaxNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ZipPostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            Address1 = "123 Main St",
                            Address2 = "Apt 4",
                            City = "New York",
                            Company = "ABC Company",
                            County = "County 1",
                            CreatedOn = new DateTime(2023, 7, 1, 14, 46, 55, 257, DateTimeKind.Local).AddTicks(220),
                            CustomerId = 1,
                            Deleted = false,
                            Email = "john.doe@example.com",
                            FaxNumber = "555-5678",
                            FirstName = "John",
                            LastName = "Doe",
                            PhoneNumber = "555-1234",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZipPostalCode = "12345"
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            Address1 = "456 Oak St",
                            Address2 = "Unit 7",
                            City = "Los Angeles",
                            Company = "XYZ Company",
                            County = "County 2",
                            CreatedOn = new DateTime(2023, 7, 1, 14, 46, 55, 257, DateTimeKind.Local).AddTicks(225),
                            CustomerId = 1,
                            Deleted = false,
                            Email = "jane.smith@example.com",
                            FaxNumber = "555-8765",
                            FirstName = "Jane",
                            LastName = "Smith",
                            PhoneNumber = "555-4321",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZipPostalCode = "67890"
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            Address1 = "456 Oak St",
                            Address2 = "Unit 7",
                            City = "Los Angeles",
                            Company = "XYZ Company",
                            County = "County 2",
                            CreatedOn = new DateTime(2023, 7, 1, 14, 46, 55, 257, DateTimeKind.Local).AddTicks(227),
                            CustomerId = 2,
                            Deleted = false,
                            Email = "jane.smith@example.com",
                            FaxNumber = "555-8765",
                            FirstName = "Jane",
                            LastName = "Smith",
                            PhoneNumber = "555-4321",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZipPostalCode = "67890"
                        },
                        new
                        {
                            Id = 4,
                            Active = true,
                            Address1 = "123 Main St",
                            Address2 = "Apt 4",
                            City = "New York",
                            Company = "ABC Company",
                            County = "County 1",
                            CreatedOn = new DateTime(2023, 7, 1, 14, 46, 55, 257, DateTimeKind.Local).AddTicks(230),
                            CustomerId = 2,
                            Deleted = false,
                            Email = "john.doe@example.com",
                            FaxNumber = "555-5678",
                            FirstName = "John",
                            LastName = "Doe",
                            PhoneNumber = "555-1234",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZipPostalCode = "12345"
                        });
                });

            modelBuilder.Entity("PathDev.Core.Model.EFModel.Customer.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSystemRole")
                        .HasColumnType("bit");

                    b.Property<string>("LastIpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            CreatedOn = new DateTime(2023, 7, 1, 14, 46, 55, 257, DateTimeKind.Local).AddTicks(46),
                            DateOfBirth = new DateTime(2023, 7, 1, 14, 46, 55, 257, DateTimeKind.Local).AddTicks(57),
                            Deleted = false,
                            Email = "customer1@example.com",
                            FirstName = "John",
                            Gender = "Male",
                            IsSystemRole = true,
                            LastIpAddress = "127.0.0.1",
                            LastLoginDate = new DateTime(2023, 7, 1, 11, 46, 55, 257, DateTimeKind.Utc).AddTicks(35),
                            LastName = "Doe",
                            Phone = "123456789",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "customer1"
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            CreatedOn = new DateTime(2023, 7, 1, 14, 46, 55, 257, DateTimeKind.Local).AddTicks(64),
                            DateOfBirth = new DateTime(2023, 7, 1, 14, 46, 55, 257, DateTimeKind.Local).AddTicks(64),
                            Deleted = false,
                            Email = "customer2@example.com",
                            FirstName = "Jane",
                            Gender = "Female",
                            IsSystemRole = false,
                            LastIpAddress = "192.168.0.1",
                            LastLoginDate = new DateTime(2023, 7, 1, 11, 46, 55, 257, DateTimeKind.Utc).AddTicks(63),
                            LastName = "Smith",
                            Phone = "987654321",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "customer2"
                        });
                });

            modelBuilder.Entity("PathDev.Core.Model.EFModel.Customer.CustomerPassword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("CustomerPasswords");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            CreatedOn = new DateTime(2023, 7, 1, 14, 46, 55, 257, DateTimeKind.Local).AddTicks(191),
                            CustomerId = 1,
                            Deleted = false,
                            Password = "123456",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            CreatedOn = new DateTime(2023, 7, 1, 14, 46, 55, 257, DateTimeKind.Local).AddTicks(198),
                            CustomerId = 2,
                            Deleted = false,
                            Password = "123456",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("PathDev.Core.Model.EFModel.Order.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("BillingAddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomOrderNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerIp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("OrderDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OrderShippingExclTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OrderShippingInclTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("int");

                    b.Property<decimal>("OrderSubTotalDiscountExclTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OrderSubTotalDiscountInclTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OrderSubtotalExclTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OrderSubtotalInclTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OrderTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OrderTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("PickupAddressId")
                        .HasColumnType("int");

                    b.Property<bool>("PickupInStore")
                        .HasColumnType("bit");

                    b.Property<int?>("ShippingAddressId")
                        .HasColumnType("int");

                    b.Property<string>("ShippingMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("PathDev.Core.Model.EFModel.Order.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("DiscountAmountExclTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DiscountAmountInclTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ItemWeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("PriceExclTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PriceInclTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPriceExclTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPriceInclTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("PathDev.Core.Model.EFModel.Product.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<decimal>("AdditionalShippingCharge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("FullDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gtin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsFreeShipping")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShipEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTaxExempt")
                        .HasColumnType("bit");

                    b.Property<decimal>("Length")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NotReturnable")
                        .HasColumnType("bit");

                    b.Property<decimal>("OldPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("OrderCount")
                        .HasColumnType("int");

                    b.Property<int>("OrderMaximumQuantity")
                        .HasColumnType("int");

                    b.Property<int>("OrderMinimumQuantity")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Width")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            AdditionalShippingCharge = 5.99m,
                            CreatedOn = new DateTime(2023, 7, 1, 14, 46, 55, 257, DateTimeKind.Local).AddTicks(255),
                            Deleted = false,
                            FullDescription = "Full description for Product 1",
                            Gtin = "GTIN-1",
                            Height = 3.5m,
                            IsFreeShipping = false,
                            IsShipEnabled = true,
                            IsTaxExempt = false,
                            Length = 10.5m,
                            Name = "Product 1",
                            NotReturnable = false,
                            OldPrice = 24.99m,
                            OrderCount = 50,
                            OrderMaximumQuantity = 10,
                            OrderMinimumQuantity = 1,
                            Price = 19.99m,
                            ShortDescription = "Short description for Product 1",
                            StockQuantity = 100,
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Weight = 2.5m,
                            Width = 5.5m
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            AdditionalShippingCharge = 0.00m,
                            CreatedOn = new DateTime(2023, 7, 1, 14, 46, 55, 257, DateTimeKind.Local).AddTicks(262),
                            Deleted = false,
                            FullDescription = "Full description for Product 2",
                            Gtin = "GTIN-2",
                            Height = 2.5m,
                            IsFreeShipping = true,
                            IsShipEnabled = true,
                            IsTaxExempt = true,
                            Length = 8.5m,
                            Name = "Product 2",
                            NotReturnable = true,
                            OldPrice = 14.99m,
                            OrderCount = 25,
                            OrderMaximumQuantity = 5,
                            OrderMinimumQuantity = 1,
                            Price = 9.99m,
                            ShortDescription = "Short description for Product 2",
                            StockQuantity = 50,
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Weight = 1.5m,
                            Width = 4.5m
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            AdditionalShippingCharge = 3.99m,
                            CreatedOn = new DateTime(2023, 7, 1, 14, 46, 55, 257, DateTimeKind.Local).AddTicks(266),
                            Deleted = false,
                            FullDescription = "Full description for Product 3",
                            Gtin = "GTIN-3",
                            Height = 3.8m,
                            IsFreeShipping = false,
                            IsShipEnabled = true,
                            IsTaxExempt = false,
                            Length = 9.8m,
                            Name = "Product 3",
                            NotReturnable = false,
                            OldPrice = 19.99m,
                            OrderCount = 75,
                            OrderMaximumQuantity = 20,
                            OrderMinimumQuantity = 1,
                            Price = 14.99m,
                            ShortDescription = "Short description for Product 3",
                            StockQuantity = 200,
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Weight = 1.8m,
                            Width = 4.8m
                        },
                        new
                        {
                            Id = 4,
                            Active = true,
                            AdditionalShippingCharge = 0.00m,
                            CreatedOn = new DateTime(2023, 7, 1, 14, 46, 55, 257, DateTimeKind.Local).AddTicks(270),
                            Deleted = false,
                            FullDescription = "Full description for Product 4",
                            Gtin = "GTIN-4",
                            Height = 2.2m,
                            IsFreeShipping = true,
                            IsShipEnabled = true,
                            IsTaxExempt = true,
                            Length = 7.2m,
                            Name = "Product 4",
                            NotReturnable = true,
                            OldPrice = 12.99m,
                            OrderCount = 40,
                            OrderMaximumQuantity = 10,
                            OrderMinimumQuantity = 1,
                            Price = 7.99m,
                            ShortDescription = "Short description for Product 4",
                            StockQuantity = 75,
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Weight = 1.2m,
                            Width = 3.2m
                        },
                        new
                        {
                            Id = 5,
                            Active = true,
                            AdditionalShippingCharge = 4.99m,
                            CreatedOn = new DateTime(2023, 7, 1, 14, 46, 55, 257, DateTimeKind.Local).AddTicks(279),
                            Deleted = false,
                            FullDescription = "Full description for Product 5",
                            Gtin = "GTIN-5",
                            Height = 4.0m,
                            IsFreeShipping = false,
                            IsShipEnabled = true,
                            IsTaxExempt = false,
                            Length = 12.0m,
                            Name = "Product 5",
                            NotReturnable = false,
                            OldPrice = 34.99m,
                            OrderCount = 60,
                            OrderMaximumQuantity = 15,
                            OrderMinimumQuantity = 1,
                            Price = 29.99m,
                            ShortDescription = "Short description for Product 5",
                            StockQuantity = 150,
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Weight = 3.0m,
                            Width = 6.0m
                        });
                });

            modelBuilder.Entity("PathDev.Core.Model.EFModel.Customer.Address", b =>
                {
                    b.HasOne("PathDev.Core.Model.EFModel.Customer.Customer", "Customer")
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("PathDev.Core.Model.EFModel.Customer.CustomerPassword", b =>
                {
                    b.HasOne("PathDev.Core.Model.EFModel.Customer.Customer", "Customer")
                        .WithOne("CustomerPassword")
                        .HasForeignKey("PathDev.Core.Model.EFModel.Customer.CustomerPassword", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("PathDev.Core.Model.EFModel.Order.OrderItem", b =>
                {
                    b.HasOne("PathDev.Core.Model.EFModel.Order.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PathDev.Core.Model.EFModel.Product.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PathDev.Core.Model.EFModel.Customer.Customer", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("CustomerPassword")
                        .IsRequired();
                });

            modelBuilder.Entity("PathDev.Core.Model.EFModel.Order.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("PathDev.Core.Model.EFModel.Product.Product", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
